From owner-perl5-porters@idle.com  Fri Oct 17 07:06:24 1997
Received: from oxmail4.ox.ac.uk (oxmail4.ox.ac.uk [163.1.2.33]) by sable.ox.ac.uk (1.2/8.8.3) with SMTP id HAA17578 for <mbeattie@sable.ox.ac.uk>; Fri, 17 Oct 1997 07:06:24 +0100 (BST)
Received: from sinistar.idle.com by oxmail4 with SMTP (PP) with ESMTP;
          Fri, 17 Oct 1997 07:06:13 +0100
Received: (from mdomo@localhost) by sinistar.idle.com (8.8.7/8.7.3) 
          id VAA09032 for perl5-porters-outgoing;
          Thu, 16 Oct 1997 21:59:53 -0400 (EDT)
Received: (from perlorg@localhost) by sinistar.idle.com (8.8.7/8.7.3) 
          id VAA09020 for perl5-porters; Thu, 16 Oct 1997 21:59:45 -0400 (EDT)
Received: from cu-dialup-1917.cit.cornell.edu (qmailr@CU-DIALUP-1917.CIT.CORNELL.EDU [132.236.155.75]) 
          by sinistar.idle.com (8.8.7/8.7.3) with SMTP id VAA09013 
          for <perl5-porters@perl.org>; Thu, 16 Oct 1997 21:59:43 -0400 (EDT)
Message-Id: <199710170159.VAA09013@sinistar.idle.com>
Received: (qmail 32387 invoked from smtpd); 17 Oct 1997 02:03:12 -0000
Received: from localhost (HELO cu-dialup-1917.cit.cornell.edu) (otaylor@127.0.0.1)  
          by localhost with SMTP; 17 Oct 1997 02:03:12 -0000
From: Owen Taylor <owt1@cornell.edu>
To: perl5-porters@perl.org
Subject: [perl5.004_53] Debugger crash (patch)
Date: Thu, 16 Oct 1997 22:03:09 -0400
Sender: owner-perl5-porters@idle.com
Precedence: bulk
X-Loop: Perl5-Porters
Status: RO


With perl5.004_53 on Linux (glibc), perl -de 1 causes
a segfault in get_db_sub, which looks like it was never
tested. 

I think the following fixes the problem, though it might
be cleaner just to revert to having the code inline, as
it is in earlier releases. 

Apparently some people have no bugs to debug...

Regards,
                                        Owen

*** perl5.004_53.orig/pp_hot.c	Thu Oct 16 12:45:59 1997
--- perl5.004_53/pp_hot.c	Thu Oct 16 20:28:44 1997
***************
*** 1713,1728 ****
  }
  
  static CV *
! get_db_sub(sv)
! SV *sv;
  {
      dTHR;
!     SV *oldsv = sv;
      GV *gv;
-     CV *cv;
  
!     sv = GvSV(DBsub);
!     save_item(sv);
      gv = CvGV(cv);
      if ( (CvFLAGS(cv) & (CVf_ANON | CVf_CLONED))
  	 || strEQ(GvNAME(gv), "END") 
--- 1713,1728 ----
  }
  
  static CV *
! get_db_sub(svp, cv)
! SV **svp;
! CV *cv;
  {
      dTHR;
!     SV *oldsv = *svp;
      GV *gv;
  
!     *svp = GvSV(DBsub);
!     save_item(*svp);
      gv = CvGV(cv);
      if ( (CvFLAGS(cv) & (CVf_ANON | CVf_CLONED))
  	 || strEQ(GvNAME(gv), "END") 
***************
*** 1731,1740 ****
      		&& (gv = (GV*)oldsv) ))) {
  	/* Use GV from the stack as a fallback. */
  	/* GV is potentially non-unique, or contain different CV. */
! 	sv_setsv(sv, newRV((SV*)cv));
      }
      else {
! 	gv_efullname3(sv, gv, Nullch);
      }
      cv = GvCV(DBsub);
      if (CvXSUB(cv))
--- 1731,1740 ----
      		&& (gv = (GV*)oldsv) ))) {
  	/* Use GV from the stack as a fallback. */
  	/* GV is potentially non-unique, or contain different CV. */
! 	sv_setsv(*svp, newRV((SV*)cv));
      }
      else {
! 	gv_efullname3(*svp, gv, Nullch);
      }
      cv = GvCV(DBsub);
      if (CvXSUB(cv))
***************
*** 1827,1833 ****
  
      gimme = GIMME_V;
      if ((op->op_private & OPpENTERSUB_DB) && GvCV(DBsub) && !CvNODEBUG(cv))
! 	cv = get_db_sub(sv);
      if (!cv)
  	DIE("No DBsub routine");
  
--- 1827,1833 ----
  
      gimme = GIMME_V;
      if ((op->op_private & OPpENTERSUB_DB) && GvCV(DBsub) && !CvNODEBUG(cv))
! 	cv = get_db_sub(&sv, cv);
      if (!cv)
  	DIE("No DBsub routine");
  

