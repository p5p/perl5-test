From owner-perl5-porters@idle.com  Fri Oct 24 07:09:42 1997
Received: from oxmail4.ox.ac.uk (oxmail4.ox.ac.uk [163.1.2.33]) by sable.ox.ac.uk (1.2/8.8.3) with SMTP id HAA28425 for <mbeattie@sable.ox.ac.uk>; Fri, 24 Oct 1997 07:09:42 +0100 (BST)
Received: from sinistar.idle.com by oxmail4 with SMTP (PP) with ESMTP;
          Fri, 24 Oct 1997 07:09:30 +0100
Received: (from mdomo@localhost) by sinistar.idle.com (8.8.7/8.7.3) 
          id WAA14176 for perl5-porters-outgoing;
          Thu, 23 Oct 1997 22:57:19 -0500 (CDT)
Received: (from perlorg@localhost) by sinistar.idle.com (8.8.7/8.7.3) 
          id WAA14170 for perl5-porters; Thu, 23 Oct 1997 22:57:14 -0500 (CDT)
Received: from cu-dialup-1507.cit.cornell.edu (qmailr@CU-DIALUP-1507.CIT.CORNELL.EDU [128.253.44.85]) 
          by sinistar.idle.com (8.8.7/8.7.3) with SMTP id WAA14165 
          for <perl5-porters@perl.org>; Thu, 23 Oct 1997 22:57:11 -0500 (CDT)
Received: (qmail 25143 invoked by uid 504); 24 Oct 1997 03:59:20 -0000
To: perl5-porters@perl.org
Subject: [perl5.004_53; patch] eval's and threads
From: Owen Taylor <owt1@cornell.edu>
Date: 23 Oct 1997 23:59:19 -0400
In-Reply-To: Tim Bunce's message of Thu, 23 Oct 1997 23:25:55 +0100
Message-ID: <lzhga7g6aw.fsf@cu-dialup-0803.cit.cornell.edu>
Lines: 70
X-Mailer: Gnus v5.5/Emacs 20.2
Sender: owner-perl5-porters@idle.com
Precedence: bulk
X-Loop: Perl5-Porters
Status: RO


Code like the following:

    use Thread;

    $threads = 2;  $threads++;	# content here is probably not crucial

    sub run_thread {
       eval {
          die "splat";
       };
    }

    new Thread \&run_thread;

produces errors like "panic: top_env" and "panic: threadstart". The
latter happens because the JMPENV that threadstart() sets up is returned
to when the eval happens. Instead of restarting the runops() at this
point, threadstart() panics. 

One solution would be to make threadstart handle the return from the
eval. The other solution, implemented below, is to set must_catch to
prevent that happening. I've also added initialization for top_env,
which I think was causing the first panic.

Regards,
                                        Owen

*** /usr/home/owen/store/perl5.004_53.orig/ext/Thread/Thread.xs	Thu Oct 16 12:45:52 1997
--- perl5.004_53/ext/Thread/Thread.xs	Thu Oct 23 22:15:15 1997
***************
*** 116,121 ****
--- 116,123 ----
  	goto finishoff;
      }
  
+     CATCH_SET(TRUE);
+ 
      /* Now duplicate most of perl_call_sv but with a few twists */
      op = (OP*)&myop;
      Zero(op, 1, LOGOP);
***************
*** 219,226 ****
      SPAGAIN;
      defstash = savethread->Tdefstash;	/* XXX maybe these should */
      curstash = savethread->Tcurstash;	/* always be set to main? */
!     /* top_env? */
!     /* runlevel */
      cvcache = newHV();
      thr->flags = THRf_R_JOINABLE;
      MUTEX_INIT(&thr->mutex);
--- 221,232 ----
      SPAGAIN;
      defstash = savethread->Tdefstash;	/* XXX maybe these should */
      curstash = savethread->Tcurstash;	/* always be set to main? */
!     /* top_env needs to be non-zero. The particular value doesn't matter */
!     top_env = savethread->Ttop_env;
!     runlevel = 1;		        /* XXX should be safe ? */
!     in_eval = FALSE;
!     restartop = 0;
! 
      cvcache = newHV();
      thr->flags = THRf_R_JOINABLE;
      MUTEX_INIT(&thr->mutex);






